Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COSINE
    INVERSECOSINE
    INVERSESINE
    INVERSETANGENT
    SINE
    SQUAREROOT
    TANGENT

Grammar

Rule 0     S' -> expression
Rule 1     expression -> NUMBER
Rule 2     expression -> expression PLUS expression
Rule 3     expression -> expression MINUS expression
Rule 4     expression -> expression DIVIDE expression
Rule 5     expression -> expression MULTIPLY expression
Rule 6     expression -> expression POWER LPAREN expression RPAREN
Rule 7     expression -> PI
Rule 8     expression -> FUNC_CALL

Terminals, with rules where they appear

COSINE               : 
DIVIDE               : 4
FUNC_CALL            : 8
INVERSECOSINE        : 
INVERSESINE          : 
INVERSETANGENT       : 
LPAREN               : 6
MINUS                : 3
MULTIPLY             : 5
NUMBER               : 1
PI                   : 7
PLUS                 : 2
POWER                : 6
RPAREN               : 6
SINE                 : 
SQUAREROOT           : 
TANGENT              : 
error                : 

Nonterminals, with rules where they appear

expression           : 2 2 3 3 4 4 5 5 6 6 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . NUMBER
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression POWER LPAREN expression RPAREN
    (7) expression -> . PI
    (8) expression -> . FUNC_CALL

    NUMBER          shift and go to state 2
    PI              shift and go to state 3
    FUNC_CALL       shift and go to state 4

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . POWER LPAREN expression RPAREN

    PLUS            shift and go to state 5
    MINUS           shift and go to state 6
    DIVIDE          shift and go to state 7
    MULTIPLY        shift and go to state 8
    POWER           shift and go to state 9


state 2

    (1) expression -> NUMBER .

    PLUS            reduce using rule 1 (expression -> NUMBER .)
    MINUS           reduce using rule 1 (expression -> NUMBER .)
    DIVIDE          reduce using rule 1 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 1 (expression -> NUMBER .)
    POWER           reduce using rule 1 (expression -> NUMBER .)
    $end            reduce using rule 1 (expression -> NUMBER .)
    RPAREN          reduce using rule 1 (expression -> NUMBER .)


state 3

    (7) expression -> PI .

    PLUS            reduce using rule 7 (expression -> PI .)
    MINUS           reduce using rule 7 (expression -> PI .)
    DIVIDE          reduce using rule 7 (expression -> PI .)
    MULTIPLY        reduce using rule 7 (expression -> PI .)
    POWER           reduce using rule 7 (expression -> PI .)
    $end            reduce using rule 7 (expression -> PI .)
    RPAREN          reduce using rule 7 (expression -> PI .)


state 4

    (8) expression -> FUNC_CALL .

    PLUS            reduce using rule 8 (expression -> FUNC_CALL .)
    MINUS           reduce using rule 8 (expression -> FUNC_CALL .)
    DIVIDE          reduce using rule 8 (expression -> FUNC_CALL .)
    MULTIPLY        reduce using rule 8 (expression -> FUNC_CALL .)
    POWER           reduce using rule 8 (expression -> FUNC_CALL .)
    $end            reduce using rule 8 (expression -> FUNC_CALL .)
    RPAREN          reduce using rule 8 (expression -> FUNC_CALL .)


state 5

    (2) expression -> expression PLUS . expression
    (1) expression -> . NUMBER
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression POWER LPAREN expression RPAREN
    (7) expression -> . PI
    (8) expression -> . FUNC_CALL

    NUMBER          shift and go to state 2
    PI              shift and go to state 3
    FUNC_CALL       shift and go to state 4

    expression                     shift and go to state 10

state 6

    (3) expression -> expression MINUS . expression
    (1) expression -> . NUMBER
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression POWER LPAREN expression RPAREN
    (7) expression -> . PI
    (8) expression -> . FUNC_CALL

    NUMBER          shift and go to state 2
    PI              shift and go to state 3
    FUNC_CALL       shift and go to state 4

    expression                     shift and go to state 11

state 7

    (4) expression -> expression DIVIDE . expression
    (1) expression -> . NUMBER
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression POWER LPAREN expression RPAREN
    (7) expression -> . PI
    (8) expression -> . FUNC_CALL

    NUMBER          shift and go to state 2
    PI              shift and go to state 3
    FUNC_CALL       shift and go to state 4

    expression                     shift and go to state 12

state 8

    (5) expression -> expression MULTIPLY . expression
    (1) expression -> . NUMBER
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression POWER LPAREN expression RPAREN
    (7) expression -> . PI
    (8) expression -> . FUNC_CALL

    NUMBER          shift and go to state 2
    PI              shift and go to state 3
    FUNC_CALL       shift and go to state 4

    expression                     shift and go to state 13

state 9

    (6) expression -> expression POWER . LPAREN expression RPAREN

    LPAREN          shift and go to state 14


state 10

    (2) expression -> expression PLUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . POWER LPAREN expression RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
    $end            reduce using rule 2 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 5
    MINUS           shift and go to state 6
    DIVIDE          shift and go to state 7
    MULTIPLY        shift and go to state 8
    POWER           shift and go to state 9

  ! PLUS            [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 2 (expression -> expression PLUS expression .) ]


state 11

    (3) expression -> expression MINUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . POWER LPAREN expression RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
    $end            reduce using rule 3 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 3 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 5
    MINUS           shift and go to state 6
    DIVIDE          shift and go to state 7
    MULTIPLY        shift and go to state 8
    POWER           shift and go to state 9

  ! PLUS            [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 3 (expression -> expression MINUS expression .) ]


state 12

    (4) expression -> expression DIVIDE expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . POWER LPAREN expression RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
    $end            reduce using rule 4 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 4 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 5
    MINUS           shift and go to state 6
    DIVIDE          shift and go to state 7
    MULTIPLY        shift and go to state 8
    POWER           shift and go to state 9

  ! PLUS            [ reduce using rule 4 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 4 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 4 (expression -> expression DIVIDE expression .) ]
  ! POWER           [ reduce using rule 4 (expression -> expression DIVIDE expression .) ]


state 13

    (5) expression -> expression MULTIPLY expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . POWER LPAREN expression RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
    $end            reduce using rule 5 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 5 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 5
    MINUS           shift and go to state 6
    DIVIDE          shift and go to state 7
    MULTIPLY        shift and go to state 8
    POWER           shift and go to state 9

  ! PLUS            [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! POWER           [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]


state 14

    (6) expression -> expression POWER LPAREN . expression RPAREN
    (1) expression -> . NUMBER
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression POWER LPAREN expression RPAREN
    (7) expression -> . PI
    (8) expression -> . FUNC_CALL

    NUMBER          shift and go to state 2
    PI              shift and go to state 3
    FUNC_CALL       shift and go to state 4

    expression                     shift and go to state 15

state 15

    (6) expression -> expression POWER LPAREN expression . RPAREN
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . POWER LPAREN expression RPAREN

    RPAREN          shift and go to state 16
    PLUS            shift and go to state 5
    MINUS           shift and go to state 6
    DIVIDE          shift and go to state 7
    MULTIPLY        shift and go to state 8
    POWER           shift and go to state 9


state 16

    (6) expression -> expression POWER LPAREN expression RPAREN .

    PLUS            reduce using rule 6 (expression -> expression POWER LPAREN expression RPAREN .)
    MINUS           reduce using rule 6 (expression -> expression POWER LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 6 (expression -> expression POWER LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 6 (expression -> expression POWER LPAREN expression RPAREN .)
    POWER           reduce using rule 6 (expression -> expression POWER LPAREN expression RPAREN .)
    $end            reduce using rule 6 (expression -> expression POWER LPAREN expression RPAREN .)
    RPAREN          reduce using rule 6 (expression -> expression POWER LPAREN expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 10 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 10 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 10 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 10 resolved as shift
WARNING: shift/reduce conflict for POWER in state 10 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 11 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 11 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 11 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 11 resolved as shift
WARNING: shift/reduce conflict for POWER in state 11 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 12 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 12 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 12 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 12 resolved as shift
WARNING: shift/reduce conflict for POWER in state 12 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 13 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 13 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 13 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 13 resolved as shift
WARNING: shift/reduce conflict for POWER in state 13 resolved as shift
